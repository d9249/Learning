[{"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/index.js":"1","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/App.js":"2","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Router.js":"3","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Home.js":"4","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Auth.js":"5","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/fbInstance.js":"6","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Navigation.js":"7","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Profile.js":"8","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Nweet.js":"9","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/AuthForm.js":"10","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/NweetFactory.js":"11"},{"size":234,"mtime":1612807234673,"results":"12","hashOfConfig":"13"},{"size":1047,"mtime":1612806160268,"results":"14","hashOfConfig":"13"},{"size":1123,"mtime":1612807213262,"results":"15","hashOfConfig":"13"},{"size":873,"mtime":1612807338390,"results":"16","hashOfConfig":"13"},{"size":1287,"mtime":1612808033381,"results":"17","hashOfConfig":"13"},{"size":709,"mtime":1612799207166,"results":"18","hashOfConfig":"13"},{"size":1114,"mtime":1612807043660,"results":"19","hashOfConfig":"13"},{"size":1396,"mtime":1612807457552,"results":"20","hashOfConfig":"13"},{"size":2095,"mtime":1612807039129,"results":"21","hashOfConfig":"13"},{"size":1911,"mtime":1612806889357,"results":"22","hashOfConfig":"13"},{"size":2762,"mtime":1612807167711,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"7et1w4",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/index.js",[],["52","53"],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/App.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Router.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Home.js",["54"],"import React, { useState, useEffect } from \"react\";\nimport { dbService, storageService } from \"fbInstance\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]);\n  useEffect(() => {\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet) => (\n          <Nweet\n            key={nweet.id}\n            nweetObj={nweet}\n            isOwner={nweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Auth.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/fbInstance.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Navigation.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/routes/Profile.js",[],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/Nweet.js",["55"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbInstance\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"Edit your nweet\"\n              value={newNweet}\n              required\n              onChange={onChange}\n            />\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\n          {isOwner && (\n            <div class=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/AuthForm.js",["56"],"import React, { useState } from \"react\";\nimport { authService } from \"fbInstance\";\n\nconst inputStyles = {};\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\nexport default AuthForm;\n",["57","58"],"/Users/mean/Documents/GitHub/NomardCoders_nwitter/nwitter/src/components/NweetFactory.js",["59"],"import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { storageService, dbService } from \"fbInstance\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NweetFactory = ({ userObj }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    if (nweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const nweetObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    await dbService.collection(\"nweets\").add(nweetObj);\n    setNweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={nweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label for=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n      {attachment && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachment}\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\nexport default NweetFactory;\n",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":2,"column":21,"nodeType":"66","messageId":"67","endLine":2,"endColumn":35},{"ruleId":"68","severity":1,"message":"69","line":51,"column":38,"nodeType":"70","endLine":51,"endColumn":74},{"ruleId":"64","severity":1,"message":"71","line":4,"column":7,"nodeType":"66","messageId":"67","endLine":4,"endColumn":18},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},{"ruleId":"68","severity":1,"message":"69","line":82,"column":11,"nodeType":"70","endLine":87,"endColumn":13},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'storageService' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'inputStyles' is assigned a value but never used.",["74"],["75"],"no-global-assign","no-unsafe-negation"]